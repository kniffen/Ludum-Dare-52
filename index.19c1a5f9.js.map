{"mappings":"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","sources":["src/seeds/seeds.ts","src/tiles/index.ts","src/grid/grid.ts","src/grid/selectedCell.ts","src/grid/index.ts","src/tools/tools.ts","src/info/index.ts","src/view.ts","src/render.ts","src/seeds/selector.ts","src/tools/currentTool.ts","src/tools/selector.ts","src/inputHandler.ts","src/main.ts","src/update.ts"],"sourcesContent":["export enum SeedId {\r\n  Wheat  = 'wheat',\r\n  Corn   = 'corn',\r\n  Carrot = 'carrot',\r\n  Potato = 'potato',\r\n  Beet   = 'beet',\r\n}\r\n\r\nexport interface Seed {\r\n  id: SeedId,\r\n  name: string,\r\n  amount: number\r\n}\r\n\r\ntype SeedCallback = (seed: Seed) => void\r\n\r\ntype Seeds = {\r\n  [key in SeedId]: Seed\r\n}\r\n\r\nconst seeds: Seeds = {\r\n  [SeedId.Wheat]:  {id: SeedId.Wheat,  name: 'Wheat',  amount: 20},\r\n  [SeedId.Corn]:   {id: SeedId.Corn,   name: 'Corn',   amount: 30},\r\n  [SeedId.Carrot]: {id: SeedId.Carrot, name: 'Carrot', amount: 5},\r\n  [SeedId.Potato]: {id: SeedId.Potato, name: 'Potato', amount: 10},\r\n  [SeedId.Beet]:   {id: SeedId.Beet,   name: 'Beets',  amount: 5},\r\n}\r\n\r\nlet currentSeed = seeds[SeedId.Wheat]\r\n\r\nexport const setCurrentSeed = (seed: Seed) => {\r\n  currentSeed = seed\r\n}\r\n\r\nexport const getCurrentSeed = () => currentSeed\r\n\r\nconst callbacks: SeedCallback[] = []\r\n\r\nexport const addSeeds = (seed: Seed, amount: number) => {\r\n  seed.amount += amount\r\n  callbacks.forEach(cb => cb(seed))\r\n}\r\n\r\nexport const removeSeeds = (seed: Seed, amount: number) => {\r\n  seed.amount -= amount\r\n  callbacks.forEach(cb => cb(seed))\r\n}\r\n\r\nexport const onUpdate = (cb: SeedCallback) => callbacks.push(cb)\r\n\r\nexport default seeds","import seeds, { Seed, SeedId } from '../seeds/seeds'\r\n\r\ninterface TileStage {\r\n  char: string\r\n  color: string\r\n}\r\n\r\nexport interface Tile {\r\n  type: TileType\r\n  name: string\r\n  seed: Seed | null\r\n  growRate: number\r\n  background: string\r\n  stage: number\r\n  stages: TileStage[]\r\n}\r\n\r\nexport enum TileType {\r\n  Grass,\r\n  Wheat,\r\n  Corn,\r\n  Carrot,\r\n  Potato,\r\n  Beet,\r\n  CultivatedDirt\r\n}\r\n\r\ntype Tiles = {\r\n  [key in TileType]: {\r\n    name: string\r\n    seed: Seed | null\r\n    growRate: number\r\n    background: string\r\n    stages: TileStage[]\r\n  }\r\n}\r\n\r\nconst tiles: Tiles = {\r\n  [TileType.Grass]: {\r\n    name: 'Grass',\r\n    seed: null,\r\n    growRate: 0.0001,\r\n    background: '#43260f',\r\n    stages: [\r\n      {char: '░', color: '#435313'},\r\n      {char: '░', color: '#7dc85a'},\r\n      {char: '▒', color: '#7dc85a'},\r\n      {char: '▓', color: '#7dc85a'},\r\n    ]\r\n  },\r\n\r\n  [TileType.Wheat]: {\r\n    name: 'Wheat',\r\n    seed: seeds[SeedId.Wheat],\r\n    growRate: 0.0002,\r\n    background: '#43260f',\r\n    stages: [\r\n      {char: '░', color: '#adbc10'},\r\n      {char: '▒', color: '#cac712'},\r\n      {char: '▓', color: '#ece822'},\r\n    ]\r\n  },\r\n\r\n  [TileType.Corn]: {\r\n    name: 'Corn',\r\n    seed: seeds[SeedId.Corn],\r\n    growRate: 0.0005,\r\n    background: '#43260f',\r\n    stages: [\r\n      {char: '░', color: '#5c7a0b'},\r\n      {char: '░', color: '#8d8d0c'},\r\n      {char: '░', color: '#ccdd13'},\r\n    ]\r\n\r\n  },\r\n  \r\n  [TileType.Carrot]: {\r\n    name: 'Carrot',\r\n    seed: seeds[SeedId.Carrot],\r\n    growRate: 0.0008,\r\n    background: '#43260f',\r\n    stages: [\r\n      {char: '░', color: '#0b7a23'},\r\n      {char: '▒', color: '#eb8f1e'},\r\n    ]\r\n  },\r\n\r\n  [TileType.Potato]: {\r\n    name: 'Potato',\r\n    seed: seeds[SeedId.Potato],\r\n    growRate: 0.001,\r\n    background: '#43260f',\r\n    stages: [\r\n      {char: '░', color: '#adbc10'},\r\n      {char: '▒', color: '#adbc10'},\r\n    ]\r\n  },\r\n\r\n  [TileType.Beet]: {\r\n    name: 'Beets',\r\n    seed: seeds[SeedId.Beet],\r\n    growRate: 0.0005,\r\n    background: '#43260f',\r\n    stages: [\r\n      {char: '░', color: '#7b1c87'},\r\n      {char: '░', color: '#b22424'},\r\n    ]\r\n  },\r\n\r\n  [TileType.CultivatedDirt]: {\r\n    name: 'Cultivated Dirt',\r\n    seed: null, \r\n    growRate: 1,\r\n    background: '#43260f',\r\n    stages: [\r\n      {char: '░', color: '#6e6e6e'}\r\n    ]\r\n  }\r\n}\r\n\r\nexport default tiles\r\nexport const createTile = (\r\n  type: TileType,\r\n  stage = 0\r\n): Tile => ({\r\n  ...tiles[type],\r\n  type,\r\n  stage,\r\n})","import tiles, {createTile, TileType, Tile } from '../tiles'\r\n\r\nexport const columns = 20\r\nexport const rows    = 15\r\n\r\nconst grass = tiles[TileType.Grass]\r\n\r\nexport const grid: Tile[][] =\r\n  Array(rows)\r\n    .fill(0)\r\n    .map(n =>\r\n      Array(columns)\r\n        .fill(0)\r\n        .map(n =>\r\n          createTile(\r\n            TileType.Grass,\r\n            Math.floor(Math.random() * (grass.stages.length - 1 + 1) + 1)\r\n          )\r\n        )\r\n    )","import { grid } from './grid'\r\n\r\nconst selectedCell = {\r\n  ref: grid[0][0],\r\n  column: 0,\r\n  row:    0\r\n}\r\n\r\nexport default selectedCell","import { grid, columns, rows } from './grid'\r\nimport selectedCell from './selectedCell'\r\n\r\nexport default grid\r\nexport { columns, rows, selectedCell }","import { TileType } from '../tiles'\r\n\r\nexport enum ToolId {\r\n  Mower,\r\n  Cultivator,\r\n  Hoe,\r\n  Sickle,\r\n  SeedBag,\r\n}\r\n\r\ninterface Tool {\r\n  id: ToolId\r\n  char: string\r\n  name: string\r\n  usedOn: TileType[]\r\n}\r\n\r\nconst tools: Tool[] = [\r\n  {\r\n    id:     ToolId.Mower,\r\n    char:   'L',\r\n    name:   'Lawnmower',\r\n    usedOn: [TileType.Grass],\r\n  },\r\n  {\r\n    id:     ToolId.Cultivator,\r\n    char:   'w',\r\n    name:   'Cultivator',\r\n    usedOn: Object.keys(TileType).map(i => Number(i))\r\n  },\r\n  { \r\n    id:     ToolId.Hoe,\r\n    char:   '7',\r\n    name:   'Hoe',\r\n    usedOn: [TileType.Carrot, TileType.Potato, TileType.Beet],\r\n  },\r\n  { \r\n    id:     ToolId.Sickle,\r\n    char:   'J',\r\n    name:   'Sickle',\r\n    usedOn: [TileType.Wheat, TileType.Corn],\r\n  },\r\n  { \r\n    id:     ToolId.SeedBag,\r\n    char:   'u',\r\n    name:   'Seed bag',\r\n    usedOn: [TileType.CultivatedDirt],\r\n  }\r\n]\r\n\r\nexport default tools","import { selectedCell } from '../grid'\r\nimport tools from '../tools/tools'\r\n\r\nconst container = document.querySelector('.info') as HTMLElement\r\n\r\nexport const update = function() {\r\n  container.innerText = `\r\n  Crop: ${selectedCell.ref.name}\r\n  Allowed tools: ${tools.filter(tool => tool.usedOn.includes(selectedCell.ref.type)).map(tool => tool.name).join(', ')}\r\n  Growth: ${((selectedCell.ref.stage + 1) / selectedCell.ref.stages.length * 100).toFixed()}%\r\n  `\r\n}","import { columns, rows } from './grid'\r\n\r\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\r\nconst ctx    = canvas.getContext('2d')\r\nconst ratio  = Math.ceil(window.devicePixelRatio)\r\n\r\nif (!ctx)\r\n  throw new Error('Unable to get canvas context')\r\n\r\nctx.font = '3rem Monospace'\r\n\r\nconst metrics    = ctx.measureText('░')\r\nconst tileHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent + 1\r\nconst tileWidth  = metrics.width\r\nconst width      = tileWidth  * columns\r\nconst height     = tileHeight * rows\r\nconst marginTop  = metrics.actualBoundingBoxAscent\r\nconst marginLeft = 0\r\n\r\nconsole.log(metrics)\r\n\r\ncanvas.width        = width  * ratio\r\ncanvas.height       = height * ratio\r\ncanvas.style.width  = width  + 'px'\r\ncanvas.style.height = height + 'px'\r\n\r\nctx.setTransform(ratio, 0, 0, ratio, 0, 0)\r\n  \r\nexport {\r\n  canvas,\r\n  ctx,\r\n  width,\r\n  height,\r\n  columns,\r\n  rows,\r\n  tileWidth,\r\n  tileHeight,\r\n  marginTop,\r\n  marginLeft\r\n}","import {\r\n  ctx,\r\n  width,\r\n  height,\r\n  columns,\r\n  rows,\r\n  tileWidth,\r\n  tileHeight,\r\n  marginLeft,\r\n  marginTop\r\n} from './view'\r\n\r\nimport grid, { selectedCell } from './grid'\r\n\r\nexport default function render() {\r\n  if (!ctx) return\r\n\r\n  ctx.clearRect(0, 0, width, height)\r\n  ctx.font = '3rem Monospace'\r\n\r\n  /* tiles */\r\n  for (let y = 0; y < rows; y++) {\r\n    for (let x = 0; x < columns; x++) {\r\n      const tile = grid[y][x]\r\n      ctx.fillStyle = tile.background\r\n      ctx.fillRect(\r\n        x * tileWidth,\r\n        y * tileHeight,\r\n        tileWidth,\r\n        tileHeight\r\n      )\r\n\r\n      const stage = Math.floor(tile.stage)\r\n      ctx.fillStyle = tile.stages[stage].color\r\n      ctx.fillText(\r\n        tile.stages[stage].char,\r\n        marginLeft + x * tileWidth,\r\n        marginTop  + y * tileHeight\r\n      )\r\n    }\r\n  }\r\n\r\n  // Selector\r\n  ctx.strokeStyle = '#FFFFFF'\r\n  ctx.strokeRect(\r\n    selectedCell.column * tileWidth,\r\n    selectedCell.row    * tileHeight,\r\n    tileWidth,\r\n    tileHeight,\r\n  )\r\n}","import tiles from '../tiles'\r\nimport { getCurrentSeed, setCurrentSeed, onUpdate }  from './seeds'\r\n\r\nimport type { Seed } from './seeds'\r\n\r\nconst container = document.querySelector('.seed-selector')\r\nconst title = document.createElement('h2')\r\n\r\nconst setTitle = (seed: Seed) => {\r\n  title.innerText = `Seed: ${seed.name} (${seed.amount})`\r\n}\r\n\r\nonUpdate((seed) => {\r\n  if (seed.id === getCurrentSeed().id) setTitle(seed)\r\n})\r\n\r\nconst options =\r\n  Object\r\n    .values(tiles)\r\n    .filter(tile => tile.seed)\r\n    .map((tile) => {\r\n      const option = document.createElement('div')\r\n\r\n      if (!tile.seed) return option\r\n  \r\n      option.innerText = tile.stages[tile.stages.length - 1].char\r\n      option.classList.add('seed')\r\n      option.setAttribute('title', tile.seed.name)\r\n      option.style.color = tile.stages[tile.stages.length - 1].color\r\n\r\n      if (getCurrentSeed().id === tile.seed.id)\r\n        option.classList.add('selected')\r\n\r\n      option.addEventListener('click', (e) => {\r\n        if (!tile.seed) return\r\n\r\n        setCurrentSeed(tile.seed)\r\n        setTitle(tile.seed)\r\n\r\n        options.forEach(option => option.classList.remove('selected'))\r\n        option.classList.add('selected')\r\n      })\r\n\r\n      return option\r\n    })\r\n\r\nsetTitle(getCurrentSeed())\r\n\r\n\r\ncontainer?.append(title, ...options)\r\n","import tools, { ToolId } from './tools'\r\nimport grid, { selectedCell } from '../grid'\r\nimport { createTile, TileType } from '../tiles'\r\nimport { getCurrentSeed, addSeeds, removeSeeds } from '../seeds'\r\nimport tiles from '../tiles'\r\n\r\nconst currentTool = {\r\n  ref: tools[0],\r\n  isActive: false,\r\n  set: (id: ToolId) => tools.find((tool) => tool.id === id), \r\n  use: () => {\r\n    if (!currentTool.isActive) return\r\n\r\n    const { column, row } = selectedCell\r\n    const crop = grid[row][column]\r\n    const currentSeed = getCurrentSeed()\r\n\r\n    if (!currentTool.ref.usedOn.includes(crop.type))\r\n      return\r\n    \r\n    switch (currentTool.ref.id) {\r\n      case ToolId.Mower:\r\n        crop.stage = 0\r\n        break\r\n\r\n      case ToolId.Cultivator:\r\n        if (crop.stage >= 1) break\r\n        grid[row][column] = createTile(TileType.CultivatedDirt)\r\n        break\r\n\r\n      case ToolId.SeedBag:\r\n        if (currentSeed.amount <= 0) break\r\n        const tileType = Object.entries(tiles).find(([key, value]) => value.seed?.id === currentSeed.id)?.[0]\r\n        if (tileType) {\r\n          grid[row][column] = createTile(Number(tileType))\r\n          removeSeeds(currentSeed, 1)\r\n        }\r\n        break\r\n\r\n      case ToolId.Hoe:\r\n      case ToolId.Sickle:\r\n        if (!crop.seed || crop.stage < crop.stages.length - 1) break\r\n        addSeeds(crop.seed, 2)\r\n        grid[row][column] = createTile(TileType.Grass)\r\n        break\r\n    }\r\n  }\r\n}\r\n\r\nexport default currentTool","import tools from './tools'\r\nimport currentTool from './currentTool'\r\n\r\nconst container = document.querySelector('.tool-selector')\r\n\r\nconst title = document.createElement('h2')\r\nconst options = tools.map(({ id, char, name }) => {\r\n  const option = document.createElement('div')\r\n\r\n  option.innerText = char\r\n  option.classList.add('tool')\r\n  option.setAttribute('title', name)\r\n\r\n  if (currentTool.ref.id === id)\r\n    option.classList.add('selected')\r\n\r\n  option.addEventListener('click', (e) => {\r\n    const newTool = tools.find(tool => tool.id === id)\r\n\r\n    if (newTool) {\r\n      currentTool.ref = newTool\r\n      title.innerText = `Tool: ${newTool.name}`\r\n    }\r\n\r\n    options.forEach(option => option.classList.remove('selected'))\r\n    option.classList.add('selected')\r\n  })\r\n\r\n  return option\r\n})\r\n\r\ntitle.innerText = `Tool: ${currentTool.ref.name}`\r\n\r\ncontainer?.append(title, ...options)","import {\r\n  canvas,\r\n  tileWidth,\r\n  tileHeight,\r\n} from './view'\r\n\r\nimport { currentTool } from './tools'\r\nimport grid, { selectedCell, columns, rows } from './grid'\r\n\r\ncanvas.addEventListener('mousemove', (e) => {\r\n  const column = Math.floor(e.offsetX / tileWidth)\r\n  const row    = Math.floor(e.offsetY / tileHeight)\r\n\r\n  selectedCell.column = column > 0 && column < columns ? column : 0\r\n  selectedCell.row    = row    > 0 && row    < rows    ? row    : 0\r\n  selectedCell.ref    = grid[selectedCell.row][selectedCell.column]\r\n\r\n  currentTool.use()\r\n})\r\n\r\ncanvas.addEventListener('mousedown', (e) => {\r\n  currentTool.isActive = true\r\n  currentTool.use()\r\n})\r\n\r\ncanvas.addEventListener('mouseup', (e) => {\r\n  currentTool.isActive = false\r\n})\r\n\r\ncanvas.addEventListener('mouseleave', (e) => {\r\n  currentTool.isActive = false\r\n})","import * as info from './info'\r\nimport update from './update'\r\nimport render from './render'\r\n\r\nimport './inputHandler'\r\nimport './tools'\r\nimport './seeds'\r\n\r\nconst gameLoop = (timestamp: DOMHighResTimeStamp) => {\r\n  info.update()\r\n  update()\r\n  render()\r\n\r\n  window.requestAnimationFrame(gameLoop)\r\n}\r\n\r\nwindow.requestAnimationFrame(gameLoop)\r\n","import grid from './grid'\r\n\r\nexport default function update() {\r\n  grid.forEach(row => row.forEach(tile => {\r\n    tile.stage += tile.growRate\r\n    \r\n    if (tile.stage > tile.stages.length - 1)\r\n      tile.stage = tile.stages.length - 1\r\n  }))\r\n}"],"names":["$24f979aea28f7bbc$export$6ae81f3d2ab1099d","SeedId","$24f979aea28f7bbc$var$seeds","Wheat","id","name","amount","Corn","Carrot","Potato","Beet","$24f979aea28f7bbc$var$currentSeed","$24f979aea28f7bbc$export$27bcbd14018ca077","$24f979aea28f7bbc$var$callbacks","$24f979aea28f7bbc$export$8f22698b75dfed67","seed","forEach","cb","$24f979aea28f7bbc$export$2e2bcd8739ae039","$3da04bbd8454be8a$export$b58a0cc33096f1fb","TileType","$3da04bbd8454be8a$var$tiles","Grass","growRate","background","stages","char","color","CultivatedDirt","$3da04bbd8454be8a$export$2e2bcd8739ae039","$3da04bbd8454be8a$export$9b747065b14bfa5f","type","stage","$79dcdb84292ef587$var$grass","$79dcdb84292ef587$export$85fc379452d91af0","Array","fill","map","n","Math","floor","random","length","$e23ca13b88b73293$export$2e2bcd8739ae039","ref","column","row","$867b2c74f2a6e1ae$export$2e2bcd8739ae039","$f6ba48b5f4e821aa$export$154215f2f8019df","ToolId","$f6ba48b5f4e821aa$export$2e2bcd8739ae039","Mower","usedOn","Cultivator","Object","keys","i","Number","Hoe","Sickle","SeedBag","$5c78dc61b39a2cb4$var$container","document","querySelector","$7f2afc126b9efe3e$export$67ea982130081db","getElementById","$7f2afc126b9efe3e$export$39f92e86d1722f3a","getContext","$7f2afc126b9efe3e$var$ratio","ceil","window","devicePixelRatio","Error","font","$7f2afc126b9efe3e$var$metrics","measureText","$7f2afc126b9efe3e$export$b1989983902bb2ec","actualBoundingBoxAscent","actualBoundingBoxDescent","$7f2afc126b9efe3e$export$8ee7b384f0a589f4","width","$7f2afc126b9efe3e$export$7e3df82ee760448c","$7f2afc126b9efe3e$export$ac607276a8fe9f0a","$7f2afc126b9efe3e$export$efefed464537bbb5","$e3d6ee63ed1479b9$export$2e2bcd8739ae039","clearRect","y","x","tile","fillStyle","fillRect","fillText","strokeStyle","strokeRect","console","log","height","style","setTransform","$b491692b279eff43$var$container","$b491692b279eff43$var$title","createElement","$b491692b279eff43$var$setTitle","innerText","push","$b491692b279eff43$var$options","values","filter","option","classList","add","setAttribute","addEventListener","e","remove","append","$6205a7ef143cc283$var$currentTool","isActive","set","find","tool","use","crop","currentSeed","includes","tileType","entries","key","value","$6205a7ef143cc283$export$2e2bcd8739ae039","$fbdc93f287ca4aa9$var$container","$fbdc93f287ca4aa9$var$title","$fbdc93f287ca4aa9$var$options","newTool","offsetX","offsetY","$ad2bcec7a0192558$var$gameLoop","timestamp","requestAnimationFrame"],"version":3,"file":"index.19c1a5f9.js.map"}